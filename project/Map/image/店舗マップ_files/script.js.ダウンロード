const locations = [
    { lat: 32.743602850872975, lng: 129.87845706348565, name: '長崎県立大ラーメン', limited: true, electronic: true, foods: false, priority: 1, url: 'shop/nagasakikendai.html', imageUrl: 'image/nagasakikendai.jpg' },
    { lat: 32.7446319263072, lng: 129.87491829070444, name: '長崎ラーメン', limited: true, electronic: true, foods: false, priority: 1, url: 'shop/nagasakikendai.html', imageUrl: 'image/nagasakikendai.jpg' },
    // ほかの店舗も同様に追加
];

let map, userMarker;
const defaultCenter = [32.74392196939944, 129.87867759617737];
const defaultZoom = 16;

const coordinateA = { lat: 32.74434829076686, lng: 129.87779131187102 };
const coordinateB = { lat: 32.74276806394401, lng: 129.87662692514667 };
let currentIndex = 0;

function initMap() {
    map = L.map('map').setView(defaultCenter, defaultZoom);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    addAllMarkers();
    checkUserLocation();

    map.on('zoomend', updateMarkers);
    map.on('moveend', checkCenterLocation);
    map.on('zoomend moveend', updateBottomPanel);

    // 初期表示時にもチェックを行う
    checkCenterLocation();
}

function addAllMarkers() {
    locations.forEach(location => {
        addMarker(location);
    });
}

function addMarker(location) {
    const marker = L.marker([location.lat, location.lng], {
        icon: getIcon(location, map.getZoom())
    }).addTo(map);

    marker.on('click', () => {
        map.setView([location.lat, location.lng], 18);
    });
}

function getIcon(location, zoom) {
    if (location.foods) {
        return L.icon({ iconUrl: 'image/foods.png', iconSize: [32, 32] });
    } else {
        return L.icon({ iconUrl: 'image/shopping.png', iconSize: [32, 32] });
    }
}

function updateMarkers() {
    const currentZoom = map.getZoom();
    map.eachLayer(layer => {
        if (layer instanceof L.Marker && layer !== userMarker) {
            const latlng = layer.getLatLng();
            const location = locations.find(loc => loc.lat === latlng.lat && loc.lng === latlng.lng);
            if (location) {
                layer.setIcon(getIcon(location, currentZoom));
            }
        }
    });
}

function checkUserLocation() {
    if ("geolocation" in navigator) {
        navigator.geolocation.watchPosition(position => {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            const userLatLng = L.latLng(userLat, userLng);

            if (userMarker) {
                map.removeLayer(userMarker);
            }

            userMarker = L.marker(userLatLng, {
                icon: L.divIcon({
                    className: 'user-marker',
                    html: '➤',
                    iconSize: [20, 20]
                })
            }).addTo(map);

            if (userLatLng.distanceTo(L.latLng(defaultCenter)) <= 1000) {
                map.setView(userLatLng);
            }
        });
    }
}

const coordinates = {
    A: { lat: 32.74434829076686, lng: 129.87779131187102, name: '浜町', radius: 500 },
    B: { lat: 32.74276806394401, lng: 129.87662692514667, name: '銅座', radius: 250 },
    C: { lat: 32.742187740055144, lng: 129.8793031779364, name: '思案橋', radius: 250 },
    D: { lat: 0, lng: 0, name: 'エリアD', radius: 400 } // D座標を適切に設定してください
};

function checkCenterLocation() {
    const mapCenter = map.getCenter();
    const iconsContainer = document.getElementById('icons-container');
    iconsContainer.innerHTML = '';

    let closestArea = null;
    let minDistance = Infinity;

    for (const [key, coord] of Object.entries(coordinates)) {
        const distance = L.latLng(mapCenter).distanceTo(L.latLng(coord));
        if (distance <= coord.radius && distance < minDistance) {
            closestArea = key;
            minDistance = distance;
        }
    }

    if (closestArea) {
        const area = coordinates[closestArea];
        iconsContainer.innerHTML = `
            <span class="area-name">${area.name}</span>
            ${getIconsHTML(closestArea)}
        `;
    }
}

function getIconsHTML(area) {
    switch (area) {
        case 'A':
            return `
                <a href="https://www.hamanmachi.com" target="_blank"><img src="image/hama.png" alt="公式ホームページ"></a>
                <a href="https://www.instagram.com/hama_bura?igsh=MThscHIyMmNsaGw0Mw%3D%3D&utm_source=qr" target="_blank"><img src="image/insta.png" alt="インスタグラム"></a>
            `;
        case 'B':
            return `
                <a href="https://www.nagasaki-douza.com/" target="_blank"><img src="image/doza.png" alt="公式ホームページ"></a>
                <a href="https://www.instagram.com/douzagram/" target="_blank"><img src="image/insta.png" alt="LINE"></a>
            `;
        case 'C':
            return `
                <a href="https://shiannbashi-yokocho.com/" target="_blank"><img src="image/sia.png" alt="公式ホームページ"></a>
                <a href="https://lin.ee/KOjOjQS" target="_blank"><img src="image/line.png" alt="公式ライン"></a>
                <a href="https://www.instagram.com/shiannbashiyokocho" target="_blank"><img src="image/insta.png" alt="インスタグラム"></a>
                <a href="https://www.facebook.com/shiannbashiyokocho" target="_blank"><img src="image/face.png" alt="Facebook"></a>
            `;
        case 'D':
            return `
                <!-- DエリアのアイコンHTMLを追加 -->
            `;
        default:
            return '';
    }
}

function updateBottomPanel() {
    if (map.getZoom() < 17) {
        document.getElementById('bottom-panel').style.display = 'none';
        return;
    }

    const center = map.getCenter();
    let closestLocation = locations[0];
    let minDistance = Infinity;

    locations.forEach((location, index) => {
        const distance = L.latLng(location.lat, location.lng).distanceTo(center);
        if (distance < minDistance) {
            minDistance = distance;
            closestLocation = location;
            currentIndex = index;
        }
    });

    updatePanelContent(closestLocation);
    document.getElementById('bottom-panel').style.display = 'flex';
}

function updatePanelContent(location) {
    document.getElementById('shop-image').src = location.imageUrl;
    document.getElementById('shop-name').textContent = location.name;
    document.getElementById('shop-detail').href = location.url;
}

function nextLocation() {
    currentIndex = (currentIndex + 1) % locations.length;
    const location = locations[currentIndex];
    updatePanelContent(location);
    map.setView([location.lat, location.lng], map.getZoom());
}

function prevLocation() {
    currentIndex = (currentIndex - 1 + locations.length) % locations.length;
    const location = locations[currentIndex];
    updatePanelContent(location);
    map.setView([location.lat, location.lng], map.getZoom());
}

document.addEventListener('DOMContentLoaded', initMap);

// 検索パネルの表示/非表示を切り替える
document.getElementById('search-toggle').addEventListener('click', () => {
    const searchOptions = document.getElementById('search-options');
    searchOptions.style.display = searchOptions.style.display === 'none' ? 'block' : 'none';
});

// 検索ボタンのクリックイベント
document.getElementById('search-button').addEventListener('click', () => {
    const electronic = document.getElementById('electronic').checked;
    const foods = document.getElementById('foods').checked;
    const limited = document.getElementById('limited').checked;

    // マーカーをフィルタリングして表示/非表示を切り替える
    map.eachLayer(layer => {
        if (layer instanceof L.Marker && layer !== userMarker) {
            const latlng = layer.getLatLng();
            const location = locations.find(loc => loc.lat === latlng.lat && loc.lng === latlng.lng);
            if (location) {
                const visible = (!electronic || location.electronic) &&
                    (!foods || location.foods) &&
                    (!limited || location.limited);
                layer.setOpacity(visible ? 1 : 0);
            }
        }
    });
});